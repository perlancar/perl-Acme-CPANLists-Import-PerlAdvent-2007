<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by perltidy on Wed Nov 28 23:00:07 2007 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2007 Perl Advent Calendar: Parallels, parallels, it's Christmas time in the city</title>
<!-- Hark hear the bells sweet Parallels -->
<link rel="stylesheet" href="../style.css" type="text/css" />
</head>
<body>
<h1><a href="../">Perl Advent Calendar 2007-12</a>-02</h1>
<h2 align="center">Parallels, parallels, it's Christmas time in the city</h2>
<h3 align="center">by Josh McAdams</h3>

<blockquote style="padding: 1em; border: 2px ridge black; background-color:#eee">
<div style="float:left; padding-right: 1em">
"Bah, humbug!" No, that's too strong<br />
'Cause it is my favorite holiday<br />
But all this year's been a busy blur<br />
Don't think I have the energy<br />
<p>
</div>
To add to my already mad rush<br />
Just 'cause it's 'tis the season.<br />
 &nbsp; &nbsp; &nbsp; &nbsp; &middot; &nbsp; &middot; &nbsp; &middot;<br />
&mdash;The Waitresses, "Christmas Wrapping"
</blockquote>

<p>Like everyone else that merry ol' soul, Saint Nick, has a lot to do around
the holiday season. In fact, he has so much going on that there is no way
Christmas could be a success without a little multi-tasking. Lucky for Santa,
there's a Perl module that can make parallel processes a breeze.
</p>

<p>
With the help of <tt><a href="http://search.cpan.org/search?module=Parallel::Jobs">Parallel::Jobs</a></tt>, Santa is sure to get everything done on time. Take for instance the task of getting his shopping list distributed to vendors across the land. There are a lot of gifts to give and there is no way Santa can wait for each list to get to the right shop before sending the next list. With <tt>Parallel::Jobs</tt>, sending all of the lists at once is easy.
</p>

<h2 style="float:right"><a href="mod2a.pl">mod2a.pl</a></h2>
<pre>
   1 <span class="k">use</span> <span class="w">Parallel::Jobs</span><span class="sc">;</span>
   2 
   3 <span class="k">my</span> <span class="i">@orders</span> = <span class="s">(</span>
   4     <span class="s">[</span> <span class="q">&#39;amazonia.txt&#39;</span>   <span class="cm">=&gt;</span> <span class="q">&#39;snick@amazonia.com:orders/&#39;</span> <span class="s">]</span><span class="cm">,</span>
   5     <span class="s">[</span> <span class="q">&#39;sprawlmart.csv&#39;</span> <span class="cm">=&gt;</span> <span class="q">&#39;claus@sprawlmart.com:cheap_stuff/&#39;</span> <span class="s">]</span><span class="cm">,</span>
   6     <span class="s">[</span> <span class="q">&#39;priceco.xml&#39;</span>    <span class="cm">=&gt;</span> <span class="q">&#39;santa@priceco.com:bulk_buys/&#39;</span> <span class="s">]</span><span class="cm">,</span>
   7 <span class="s">)</span><span class="sc">;</span>
   8 
   9 <span class="k">my</span> <span class="i">%placed_orders</span><span class="sc">;</span>
  10 
  11 <span class="k">for</span> <span class="k">my</span> <span class="i">$order</span> <span class="s">(</span><span class="i">@orders</span><span class="s">)</span> <span class="s">{</span>
  12     <span class="i">$placed_orders</span>{ <span class="i">Parallel::Jobs::start_job</span><span class="s">(</span> <span class="q">&#39;scp&#39;</span><span class="cm">,</span> <span class="i">@$order</span> <span class="s">)</span> } =
  13       <span class="i">$order</span>-&gt;[<span class="n">0</span>]<span class="sc">;</span>
  14 <span class="s">}</span>
  15 
  16 <span class="k">while</span> <span class="s">(</span> <span class="k">my</span> <span class="s">(</span> <span class="i">$pid</span><span class="cm">,</span> <span class="i">$event</span><span class="cm">,</span> <span class="i">$data</span> <span class="s">)</span> = <span class="i">Parallel::Jobs::watch_jobs</span><span class="s">(</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
  17     <span class="k">if</span> <span class="s">(</span> <span class="i">$event</span> <span class="k">eq</span> <span class="q">&#39;EXIT&#39;</span> <span class="s">)</span> <span class="s">{</span>
  18         <span class="k">if</span> <span class="s">(</span> !<span class="i">$data</span> <span class="s">)</span> <span class="s">{</span>
  19             <span class="k">print</span> <span class="q">&quot;Transferred $placed_orders{$pid}\n&quot;</span><span class="sc">;</span>
  20         <span class="s">}</span>
  21         <span class="k">else</span> <span class="s">{</span>
  22             <span class="k">print</span> <span class="q">&quot;Failed to transfer $placed_orders{$pid}\n&quot;</span><span class="sc">;</span>
  23         <span class="s">}</span>
  24         <span class="k">delete</span> <span class="i">$placed_orders</span>{<span class="i">$pid</span>}<span class="sc">;</span>
  25     <span class="s">}</span>
  26 <span class="s">}</span>
</pre>

<p>
In the program above you can see that Santa needs to send three files
of orders to three different stores, so he queues them all up in an
array and then loops through the array calling <tt>scp</tt> for each
file using the <tt>start_jobs</tt> subroutine. This subroutine returns
a process ID which is stored in a hash, along with the name of the file
that is being transferred.
</p>

<p>
Then the script runs a loop using the <tt>watch_jobs</tt> subroutine as a condition. This subroutine returns the process ID, an event name, and some data for each process that was started with <tt>start_jobs</tt>. Once all of the jobs are done, it returns <tt>undef</tt> and terminates the loop.
</p>

<p>
Finally, Saint Nick prints out the names of any files that he couldn't track with <tt>watch_jobs</tt>. This should never happen, but it's better to know on the off chance that it does.
</p>

<p>
Of course, what you're seeing here is very similar to using <tt>wait</tt> in the shell. But, this is just the surface of what <tt>Parallel::Jobs</tt> can do. <tt>Parallel::Jobs</tt> can also capture output and return it as an event and data through <tt>watch_jobs</tt> or even write it to a file. It can also pass data that is contained in a file to any of the executed jobs via their <tt>STDIN</tt>.
</p>

<p>We'll wrap up with an example that exercises more of the functionality found
in <tt>Parallel::Jobs</tt>. One feature that we'll use is passing to and
collecting data from a job using standard filehandles and named files. We'll
also tell <tt>Parallel::Jobs</tt> to collect the output of a job for later use;
&agrave; la <tt>qx</tt>. In this example, the naughty list contains three
items and the nice list contains four items.</p>

<h2 style="float:right"><a href="mod2b.pl">mod2b.pl</a></h2>
<pre>
   1 <span class="k">use</span> <span class="w">Parallel::Jobs</span><span class="sc">;</span>
   2 
   3 <span class="k">my</span> <span class="i">$nice_pid</span> =
   4   <span class="i">Parallel::Jobs::start_job</span><span class="s">(</span>
   5     <span class="s">{</span> <span class="w">stdin_file</span> <span class="cm">=&gt;</span> <span class="q">&#39;nice.txt&#39;</span><span class="cm">,</span> <span class="w">stdout_capture</span> <span class="cm">=&gt;</span> <span class="n">1</span><span class="cm">,</span> <span class="w">stderr_capture</span> <span class="cm">=&gt;</span> <span class="n">1</span> <span class="s">}</span><span class="cm">,</span>
   6     <span class="q">&#39;wc&#39;</span><span class="cm">,</span> <span class="q">&#39;-l&#39;</span> <span class="s">)</span><span class="sc">;</span>
   7 
   8 <span class="k">print</span> <span class="q">&quot;NICE [$nice_pid]\n&quot;</span><span class="sc">;</span>
   9 
  10 <span class="k">sleep</span><span class="s">(</span><span class="n">1</span><span class="s">)</span><span class="sc">;</span>
  11 
  12 <span class="k">open</span><span class="s">(</span> <span class="w">NAUGHTY</span><span class="cm">,</span>     <span class="q">&#39;&lt;&#39;</span><span class="cm">,</span> <span class="q">&#39;naughty.txt&#39;</span> <span class="s">)</span> <span class="k">or</span> <span class="k">die</span> <span class="i">$!</span><span class="sc">;</span>
  13 <span class="k">open</span><span class="s">(</span> <span class="w">NAUGHTY_OUT</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> <span class="q">&#39;naughty.out&#39;</span> <span class="s">)</span> <span class="k">or</span> <span class="k">die</span> <span class="i">$!</span><span class="sc">;</span>
  14 <span class="k">open</span><span class="s">(</span> <span class="w">NAUGHTY_ERR</span><span class="cm">,</span> <span class="q">&#39;&gt;&#39;</span><span class="cm">,</span> <span class="q">&#39;naughty.err&#39;</span> <span class="s">)</span> <span class="k">or</span> <span class="k">die</span> <span class="i">$!</span><span class="sc">;</span>
  15 
  16 <span class="k">my</span> <span class="i">$naughty_pid</span> = <span class="i">Parallel::Jobs::start_job</span><span class="s">(</span>
  17     <span class="s">{</span>
  18         <span class="w">stdin_handle</span>  <span class="cm">=&gt;</span> <span class="i">*NAUGHTY</span><span class="cm">,</span>
  19         <span class="w">stdout_handle</span> <span class="cm">=&gt;</span> <span class="i">*NAUGHTY_OUT</span><span class="cm">,</span>
  20         <span class="w">stderr_handle</span> <span class="cm">=&gt;</span> <span class="i">*NAUGHTY_ERR</span>
  21     <span class="s">}</span><span class="cm">,</span>
  22     <span class="q">&#39;wc&#39;</span><span class="cm">,</span> <span class="q">&#39;-l&#39;</span>
  23 <span class="s">)</span><span class="sc">;</span>
  24 
  25 <span class="k">print</span> <span class="q">&quot;NOT NICE [$naughty_pid]\n&quot;</span><span class="sc">;</span>
  26 
  27 <span class="k">while</span> <span class="s">(</span> <span class="k">my</span> <span class="s">(</span> <span class="i">$pid</span><span class="cm">,</span> <span class="i">$event</span><span class="cm">,</span> <span class="i">$data</span> <span class="s">)</span> = <span class="i">Parallel::Jobs::watch_jobs</span><span class="s">(</span><span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
  28     <span class="k">print</span> <span class="q">&quot;Finished [$pid] [$event] [$data]\n&quot;</span><span class="sc">;</span>
  29 <span class="s">}</span>
  30 
  31 <span class="k">close</span> <span class="w">NAUGHTY</span><span class="sc">;</span>
</pre>

<p>Which outputs:</p>

<pre>
santa@northpole:~ $ mod2b.pl<span class="c">
NICE [21214]
NOT NICE [21215]
Finished [21214] [EXIT] [0]
Finished [21214] [STDOUT] [       4 ]
Finished [21214] [STDOUT] []
Finished [21214] [STDERR] []
Finished [21215] [EXIT] [0]</span>
</pre>

<p>
There are also files named <tt>naughty.err</tt> and a <tt>naughty.out</tt>, 
the latter contains the character <tt>3</tt>.
</p>

</body>
</html>
