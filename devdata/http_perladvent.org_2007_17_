<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2007 Perl Advent Calendar: Subclassing all the way!</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body>
<h1><a href="../">Perl Advent Calendar 2007-12</a>-17</h1>
<h2 align="center">Subclassing all the way!</h2>
<h3 align="center">by David Westbrook</h3>
<p></p>
<p></p>
<blockquote style="padding: 1em; border: 2px ridge black; background-color:#eee">
Calendar policy forbidding a module author to review his own module, has not
breached here.
<tt><a href="http://search.cpan.org/search?module=Pod::Advent">Pod::Advent</a></tt> 
was created expressly for this review and to aid in the article authoring
process. <br/ > &mdash; The Management
</blockquote>

<p>Advent Calendar entry submissions have <a href="../FAQ-submit.html">specific
formatting guidelines</a>, which should be adhered to by contributing authors
to ensure uninformity, otherwise the editors must undertake time-consuming
revisions. Using <tt><a href="http://search.cpan.org/search?module=Pod::Simple">Pod::Simple</a></tt><sup><a href="#1">1</a></sup>, with considerable guidance from the accompanying documentation in <tt>Pod::Simple::Subclassing</tt>, a simple extended dialect of <tt><a href="http://perldoc.perl.org/perlpod.html">POD</a></tt> can be defined to aid authors.<sup><a href="#2">2</a></sup></p>

<p>The first items we want to address and make easy are the use of <tt>&lt;tt&gt;</tt> for file, module, and program names, the use of <tt>perltidy -nnn -html</tt> for code samples, and the whole header section, including title, author, and css.</p>

<p>The easiest is the POD <tt>F&lt;&gt;</tt> tag, where we use the <tt><span class="i">_handle_element_start</span><span class="s">(</span><span class="s">)</span>
</tt> and <tt><span class="i">_handle_element_end</span><span class="s">(</span><span class="s">)</span>
</tt> methods to simply insert <tt>&lt;tt&gt;</tt> and <tt>&lt;/tt&gt;</tt> tags, respectively, for the <tt><span class="i">$element_name</span> <span class="k">eq</span> <span class="q">&#39;F&#39;</span>
</tt> case (lines 43-44, 88-89). Implementing the <tt>I&lt;&gt;</tt> and <tt>B&lt;&gt;</tt> codes follows the exact same model (lines 45-46, 90-91).</p>
<p>Now, module names are a step more, because we want them to be hyperlinked to their CPAN search results. For this, we define our code custom POD code of <tt>M&lt;&gt;</tt> with the <tt><span class="i">accept_codes</span><span class="s">(</span><span class="s">)</span>
</tt> method (line 21). We have this behave the same as <tt>F&lt;&gt;</tt>, with the addition of a case in the <tt><span class="i">_handle_text</span><span class="s">(</span><span class="s">)</span>
</tt> method that changes the string from just the text to a HTML hyperlink (lines 125-126).</p>
<p>Any <I>verbatim</I> (indented) text in POD we want to treat as code, and have automatically follow the <tt>perltidy</tt> guideline. For this, we have a case in the <tt><span class="i">_handle_text</span><span class="s">(</span><span class="s">)</span>
</tt> method for <tt><span class="i">$element_name</span> <span class="k">eq</span> <span class="q">&#39;Verbatim&#39;</span>
</tt> that passes the text through <tt>perltidy</tt> with the <tt>-<span class="w">html</span> -<span class="w">pre</span>
</tt> options (lines 99-107).</p>

<p>The tricky ones are setting the title and author fields. This is because they can't simply be written out in the order they are found in the POD source; e.g. the title appears twice -- once in the <tt>&lt;title&gt;</tt> tag and once in a <tt>&lt;h1&gt;</tt> tag, and both of those, and the author name, comprise the whole HTML header (lines 65-76) along with some static markup such as the <tt>&lt;html&gt;</tt>, <tt>&lt;head&gt;</tt>, <tt>&lt;body&gt;</tt>, and <tt>&lt;style&gt;</tt> tags.</p>
<p>So the approach is to use the <tt><span class="i">accept_targets_as_text</span><span class="s">(</span><span class="s">)</span>
</tt> method (line 22) to declare several <tt><span class="pd">=for advent_KEY VALUE</span>
</tt> tags to use for setting the various pieces of information. We note via a <tt><span class="i">$section</span>
</tt> package variable whenever we come upon one of these in the <tt><span class="i">_handle_element_start</span><span class="s">(</span><span class="s">)</span>
</tt> method (lines 47-48). Then the next <tt><span class="i">_handle_text</span><span class="s">(</span><span class="s">)</span>
</tt> run for <tt><span class="i">$element_name</span> <span class="k">eq</span> <span class="q">&#39;Para&#39;</span>
</tt> will use the text to set <tt><span class="i">$data</span>{<span class="i">$section</span>}
</tt> instead of appending it to the output (lines 118-120). So this will populate a data hash as the source is processed.</p>
<p>What then ties everything together and does the actual output is the <tt><span class="i">$element_name</span> <span class="k">eq</span> <span class="q">&#39;Document&#39;</span>
</tt> case in the <tt><span class="i">_handle_element_end</span><span class="s">(</span><span class="s">)</span>
</tt> method (lines 58-78).</p>
<pre>
  <span class="k">use</span> <span class="w">mod17</span><span class="sc">;</span> <span class="c"># a.k.a. Pod::Advent</span>
  <span class="k">my</span> <span class="i">$advent</span> = <span class="w">mod17</span><span class="w">-&gt;new</span><span class="sc">;</span>
  <span class="i">$advent</span><span class="i">-&gt;parse_file</span><span class="s">(</span> \<span class="i">*STDIN</span> <span class="s">)</span><span class="sc">;</span>
</pre>
<a name="mod17.pm"></a><h2><a href="mod17.pm">mod17.pm</a></h2><pre>
   1 <span class="k">package </span><span class="i">mod17</span><span class="sc">;</span>
   2 
   3 <span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>
   4 <span class="k">use</span> <span class="w">warnings</span><span class="sc">;</span>
   5 <span class="k">use</span> <span class="w">base</span> <span class="q">qw(Pod::Simple)</span><span class="sc">;</span>
   6 <span class="k">use</span> <span class="w">Perl::Tidy</span><span class="sc">;</span>
   7 
   8 <span class="k">our</span> <span class="i">@mode</span><span class="sc">;</span>
   9 <span class="k">our</span> <span class="i">$section</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span>
  10 <span class="k">our</span> <span class="i">%data</span> = <span class="s">(</span>
  11   <span class="w">title</span> <span class="cm">=&gt;</span> <span class="k">undef</span><span class="cm">,</span>
  12   <span class="w">author</span> <span class="cm">=&gt;</span> <span class="k">undef</span><span class="cm">,</span>
  13   <span class="w">year</span> <span class="cm">=&gt;</span> <span class="s">(</span><span class="k">localtime</span><span class="s">)</span>[<span class="n">5</span>]+<span class="n">1900</span><span class="cm">,</span>
  14   <span class="w">day</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="cm">,</span>
  15   <span class="w">body</span> <span class="cm">=&gt;</span> <span class="q">&#39;&#39;</span><span class="cm">,</span>
  16 <span class="s">)</span><span class="sc">;</span>
  17 
<a name="new"></a>  18 <span class="k">sub </span><span class="m">new</span> <span class="s">{</span>
  19   <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
  20   <span class="i">$self</span> = <span class="i">$self</span><span class="i">-&gt;SUPER::new</span><span class="s">(</span><span class="i">@_</span><span class="s">)</span><span class="sc">;</span>
  21   <span class="i">$self</span><span class="i">-&gt;accept_codes</span><span class="s">(</span> <span class="q">qw/A M N/</span> <span class="s">)</span><span class="sc">;</span>
  22   <span class="i">$self</span><span class="i">-&gt;accept_targets_as_text</span><span class="s">(</span> <span class="q">qw/advent_title advent_author advent_year advent_day/</span> <span class="s">)</span><span class="sc">;</span>
  23   <span class="i">$self</span><span class="i">-&gt;accept_targets</span><span class="s">(</span> <span class="q">qw/eds/</span> <span class="s">)</span><span class="sc">;</span>
  24   <span class="i">$self</span><span class="i">-&gt;accept_directive_as_data</span><span class="s">(</span><span class="q">&#39;sourcedcode&#39;</span><span class="s">)</span><span class="sc">;</span>
  25   <span class="k">return</span> <span class="i">$self</span><span class="sc">;</span>
  26 <span class="s">}</span>
  27 
<a name="add"></a>  28 <span class="k">sub </span><span class="m">add</span> <span class="s">{</span>
  29   <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
  30   <span class="i">$data</span>{<span class="w">body</span>} .= <span class="i">$_</span>[<span class="n">0</span>]<span class="sc">;</span>
  31 <span class="s">}</span>
  32 
<a name="br"></a>  33 <span class="k">sub </span><span class="m">br</span> <span class="s">{</span> <span class="k">shift</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&quot;\n&quot;</span><span class="s">)</span> <span class="s">}</span>
  34 
<a name="_handle_element_start"></a>  35 <span class="k">sub </span><span class="m">_handle_element_start</span> <span class="s">{</span>
  36   <span class="k">my</span><span class="s">(</span><span class="i">$parser</span><span class="cm">,</span> <span class="i">$element_name</span><span class="cm">,</span> <span class="i">$attr_hash_r</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span>
  37   <span class="k">push</span> <span class="i">@mode</span><span class="cm">,</span> <span class="i">$element_name</span><span class="sc">;</span>
  38   <span class="k">if</span><span class="s">(</span> <span class="i">$element_name</span> <span class="k">eq</span> <span class="q">&#39;Document&#39;</span> <span class="s">)</span><span class="s">{</span>
  39   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$element_name</span> =~ <span class="q">/^head([1-4])$/</span> <span class="s">)</span><span class="s">{</span>
  40     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&quot;&lt;h$1&gt;&quot;</span><span class="s">)</span><span class="sc">;</span>
  41   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$element_name</span> <span class="k">eq</span> <span class="q">&#39;Para&#39;</span> <span class="s">)</span><span class="s">{</span>
  42     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&#39;&lt;p&gt;&#39;</span><span class="s">)</span><span class="sc">;</span>
  43   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$element_name</span> =~ <span class="q">/^(M|F|C)$/</span> <span class="s">)</span><span class="s">{</span>
  44     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&#39;&lt;tt&gt;&#39;</span><span class="s">)</span><span class="sc">;</span>
  45   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$element_name</span> =~ <span class="q">/^(I|B)$/</span> <span class="s">)</span><span class="s">{</span>
  46     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&quot;&lt;$1&gt;&quot;</span><span class="s">)</span><span class="sc">;</span>
  47   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$element_name</span> <span class="k">eq</span> <span class="q">&#39;for&#39;</span> &amp;&amp; <span class="i">$attr_hash_r</span>-&gt;{<span class="w">target</span>} =~ <span class="q">/^advent_(\w+)$/</span> <span class="s">)</span><span class="s">{</span>
  48     <span class="i">$section</span> = <span class="i">$1</span><span class="sc">;</span>
  49   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$element_name</span> <span class="k">eq</span> <span class="q">&#39;for&#39;</span> &amp;&amp; <span class="i">$attr_hash_r</span>-&gt;{<span class="w">target</span>} <span class="k">eq</span> <span class="q">&#39;eds&#39;</span> <span class="s">)</span><span class="s">{</span>
  50     <span class="i">$mode</span>[<span class="n">-1</span>] = <span class="i">$attr_hash_r</span>-&gt;{<span class="w">target</span>}<span class="sc">;</span>
  51     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&#39;&lt;blockquote style=&quot;padding: 1em; border: 2px ridge black; background-color:#eee&quot;&gt;&#39;</span><span class="s">)</span><span class="sc">;</span>
  52   <span class="s">}</span>
  53 <span class="s">}</span>
  54 
<a name="_handle_element_end"></a>  55 <span class="k">sub </span><span class="m">_handle_element_end</span> <span class="s">{</span>
  56   <span class="k">my</span><span class="s">(</span><span class="i">$parser</span><span class="cm">,</span> <span class="i">$element_name</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span>
  57   <span class="k">my</span> <span class="i">$mode</span> = <span class="k">pop</span> <span class="i">@mode</span><span class="sc">;</span>
  58   <span class="k">if</span><span class="s">(</span> <span class="i">$element_name</span> <span class="k">eq</span> <span class="q">&#39;Document&#39;</span> <span class="s">)</span><span class="s">{</span>
  59     <span class="i">$parser</span><span class="i">-&gt;br</span><span class="sc">;</span>
  60     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&#39;&lt;/body&gt;&#39;</span><span class="s">)</span><span class="sc">;</span>
  61     <span class="i">$parser</span><span class="i">-&gt;br</span><span class="sc">;</span>
  62     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&#39;&lt;/html&gt;&#39;</span><span class="s">)</span><span class="sc">;</span>
  63     <span class="i">$parser</span><span class="i">-&gt;br</span><span class="sc">;</span>
  64 
  65     <span class="k">printf</span> <span class="h">&lt;&lt;&#39;EOF&#39;</span><span class="cm">,</span> <span class="i">@data</span>{<span class="q">qw/year title year day title author/</span>}<span class="sc">;</span>
  66 <span class="hh">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; </span>
  67 <span class="hh">   &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span>
  68 <span class="hh">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span>
  69 <span class="hh">&lt;head&gt;</span>
  70 <span class="hh">&lt;title&gt;%d Perl Advent Calendar: %s&lt;/title&gt;</span>
  71 <span class="hh">&lt;link rel=&quot;stylesheet&quot; href=&quot;../style.css&quot; type=&quot;text/css&quot; /&gt;&lt;/head&gt;</span>
  72 <span class="hh">&lt;body&gt;</span>
  73 <span class="hh">&lt;h1&gt;&lt;a href=&quot;../&quot;&gt;Perl Advent Calendar %d-12&lt;/a&gt;-%02d&lt;/h1&gt;</span>
  74 <span class="hh">&lt;h2 align=&quot;center&quot;&gt;%s&lt;/h2&gt;</span>
  75 <span class="hh">&lt;h3 align=&quot;center&quot;&gt;by %s&lt;/h3&gt;</span>
  76 <span class="h">EOF</span>
  77     <span class="k">print</span> <span class="i">$data</span>{<span class="w">body</span>}<span class="sc">;</span>
  78 <span class="q">&lt;/html&gt;</span>
  79   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$element_name</span> =~ <span class="q">/^head([1-4])$/</span> <span class="s">)</span><span class="s">{</span>
  80     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&quot;&lt;/h$1&gt;&quot;</span><span class="s">)</span><span class="sc">;</span>
  81     <span class="i">$parser</span><span class="i">-&gt;br</span><span class="sc">;</span>
  82   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$element_name</span> <span class="k">eq</span> <span class="q">&#39;Para&#39;</span> <span class="s">)</span><span class="s">{</span>
  83     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&#39;&lt;/p&gt;&#39;</span><span class="s">)</span><span class="sc">;</span>
  84     <span class="i">$parser</span><span class="i">-&gt;br</span><span class="sc">;</span>
  85   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$element_name</span> <span class="k">eq</span> <span class="q">&#39;for&#39;</span> &amp;&amp; <span class="i">$mode</span> <span class="k">eq</span> <span class="q">&#39;eds&#39;</span> <span class="s">)</span><span class="s">{</span>
  86     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&#39;&lt;/blockquote&gt;&#39;</span><span class="s">)</span><span class="sc">;</span>
  87     <span class="i">$parser</span><span class="i">-&gt;br</span><span class="sc">;</span>
  88   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$element_name</span> =~ <span class="q">/^(M|F|C)$/</span> <span class="s">)</span><span class="s">{</span>
  89     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&#39;&lt;/tt&gt;&#39;</span><span class="s">)</span><span class="sc">;</span>
  90   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$element_name</span> =~ <span class="q">/^(I|B)$/</span> <span class="s">)</span><span class="s">{</span>
  91     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span><span class="q">&quot;&lt;/$1&gt;&quot;</span><span class="s">)</span><span class="sc">;</span>
  92   <span class="s">}</span>
  93 <span class="s">}</span>
  94 
<a name="_handle_text"></a>  95 <span class="k">sub </span><span class="m">_handle_text</span> <span class="s">{</span>
  96   <span class="k">my</span><span class="s">(</span><span class="i">$parser</span><span class="cm">,</span> <span class="i">$text</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span>
  97   <span class="k">my</span> <span class="i">$mode</span> = <span class="i">$mode</span>[<span class="n">-1</span>]<span class="sc">;</span>
  98   <span class="k">my</span> <span class="i">$out</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span>
  99   <span class="k">if</span><span class="s">(</span> <span class="i">$mode</span> <span class="k">eq</span> <span class="q">&#39;Verbatim&#39;</span> || <span class="i">$mode</span> <span class="k">eq</span> <span class="q">&#39;C&#39;</span> <span class="s">)</span><span class="s">{</span>
 100     <span class="k">my</span> <span class="i">$s</span><span class="sc">;</span>
 101     <span class="i">Perl::Tidy::perltidy</span><span class="s">(</span>
 102         <span class="w">source</span>            <span class="cm">=&gt;</span> \<span class="i">$text</span><span class="cm">,</span>
 103         <span class="w">destination</span>       <span class="cm">=&gt;</span> \<span class="i">$s</span><span class="cm">,</span>
 104         <span class="w">argv</span>              <span class="cm">=&gt;</span> <span class="s">[</span><span class="q">qw/-html -pre/</span><span class="s">]</span><span class="cm">,</span>
 105     <span class="s">)</span><span class="sc">;</span>
 106     <span class="i">$s</span> =~ <span class="q">s#^&lt;pre&gt;\s*(.*?)\s*&lt;/pre&gt;$#$1#si</span> <span class="k">if</span> <span class="i">$mode</span> <span class="k">eq</span> <span class="q">&#39;C&#39;</span><span class="sc">;</span>
 107     <span class="i">$out</span> .= <span class="i">$s</span><span class="sc">;</span>
 108   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$mode</span> <span class="k">eq</span> <span class="q">&#39;sourcedcode&#39;</span> <span class="s">)</span><span class="s">{</span>
 109     <span class="k">die</span> <span class="q">&quot;bad filename $text &quot;</span> <span class="k">unless</span> <span class="k">-r</span> <span class="i">$text</span><span class="sc">;</span>
 110     <span class="i">$out</span> .= <span class="k">sprintf</span> <span class="q">&#39;&lt;a name=&quot;%s&quot;&gt;&lt;/a&gt;&lt;h2&gt;&lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;&lt;/h2&gt;&#39;</span><span class="cm">,</span> <span class="s">(</span><span class="i">$text</span><span class="s">)</span><span class="n">x3</span><span class="sc">;</span>
 111     <span class="k">my</span> <span class="i">$s</span><span class="sc">;</span>
 112     <span class="i">Perl::Tidy::perltidy</span><span class="s">(</span>
 113         <span class="w">source</span>            <span class="cm">=&gt;</span> <span class="i">$text</span><span class="cm">,</span>
 114         <span class="w">destination</span>       <span class="cm">=&gt;</span> \<span class="i">$s</span><span class="cm">,</span>
 115         <span class="w">argv</span>              <span class="cm">=&gt;</span> <span class="s">[</span><span class="q">qw/-html -pre -nnn/</span><span class="s">]</span><span class="cm">,</span>
 116     <span class="s">)</span><span class="sc">;</span>
 117     <span class="i">$out</span> .= <span class="i">$s</span><span class="sc">;</span>
 118   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$mode</span> <span class="k">eq</span> <span class="q">&#39;Para&#39;</span> &amp;&amp; <span class="i">$section</span> <span class="s">)</span><span class="s">{</span>
 119     <span class="i">$data</span>{<span class="i">$section</span>} = <span class="i">$text</span><span class="sc">;</span>
 120     <span class="i">$section</span> = <span class="q">&#39;&#39;</span><span class="sc">;</span>
 121   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$mode</span> <span class="k">eq</span> <span class="q">&#39;A&#39;</span> <span class="s">)</span><span class="s">{</span>
 122     <span class="k">my</span> <span class="s">(</span><span class="i">$href</span><span class="cm">,</span> <span class="i">$text</span><span class="s">)</span> = <span class="k">split</span> <span class="q">/\|/</span><span class="cm">,</span> <span class="i">$text</span><span class="cm">,</span> <span class="n">2</span><span class="sc">;</span>
 123     <span class="i">$text</span> = <span class="i">$href</span> <span class="k">unless</span> <span class="k">defined</span> <span class="i">$text</span><span class="sc">;</span>
 124     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span> <span class="k">sprintf</span><span class="s">(</span><span class="q">&#39;&lt;tt&gt;&lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;&lt;/tt&gt;&#39;</span><span class="cm">,</span><span class="i">$href</span><span class="cm">,</span><span class="i">$text</span><span class="s">)</span> <span class="s">)</span><span class="sc">;</span>
 125   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$mode</span> <span class="k">eq</span> <span class="q">&#39;M&#39;</span> <span class="s">)</span><span class="s">{</span>
 126     <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span> <span class="k">sprintf</span><span class="s">(</span><span class="q">&#39;&lt;a href=&quot;http://search.cpan.org/search?query=%s&quot;&gt;%s&lt;/a&gt;&#39;</span><span class="cm">,</span><span class="i">$text</span><span class="cm">,</span><span class="i">$text</span><span class="s">)</span> <span class="s">)</span><span class="sc">;</span>
 127   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$mode</span> <span class="k">eq</span> <span class="q">&#39;N&#39;</span> <span class="s">)</span><span class="s">{</span>
 128     <span class="i">$out</span> .= <span class="k">sprintf</span> <span class="q">&#39;&lt;sup&gt;&lt;a href=&quot;#%s&quot;&gt;%s&lt;/a&gt;&lt;/sup&gt;&#39;</span><span class="cm">,</span> <span class="i">$text</span><span class="cm">,</span> <span class="i">$text</span><span class="sc">;</span>
 129   <span class="s">}</span><span class="k">else</span><span class="s">{</span>
 130     <span class="i">$out</span> .= <span class="i">$text</span><span class="sc">;</span>
 131   <span class="s">}</span>
 132   <span class="i">$parser</span><span class="i">-&gt;add</span><span class="s">(</span> <span class="i">$out</span><span class="cm">,</span> <span class="k">undef</span> <span class="s">)</span><span class="sc">;</span>
 133 <span class="s">}</span>
 134 <span class="n">1</span><span class="sc">;</span>
</pre>

<p><a name="2"></a>1. As noted previously, we avoid covering modules in the Phalanx 100, but scratching an itch and a non-obvious usage is doubly magic. &mdash; The Management</p>
<p><a name="3"></a>2. Examples of submissions can be seen for
<tt><a href="../1/" >1</a ></tt>/<tt><a  href="../1/mod1.pod">.pod</a></tt>, 
<tt><a href="../8/" >8</a ></tt>/<tt><a  href="../8/mod8.pod">.pod</a></tt>, 
<tt><a href="../16/">16</a></tt>/<tt><a href="../16/mod16.pod">.pod</a></tt>, 
and today <tt><a href="mod17.pod">.pod</a></tt>.</p>

</body>
</html>
