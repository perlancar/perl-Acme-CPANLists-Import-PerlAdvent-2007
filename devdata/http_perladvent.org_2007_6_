<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by perltidy on Thu Nov 30 18:10:54 2006 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2007 Perl Advent Calendar: He's making a list, Checking it twice</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body>
<h1><a href="../">Perl Advent Calendar 2007-12</a>-06</h1>
<h2 align="center">He's making a list, checking it twice</h2>
<h3 align="center">by Josh McAdams &amp staff</h3>

<p>
Many people don't know this, but when Santa checks his list and then
checks it twice, he actually reads the list from 
bottom to top the <i>first time through</i>.
That's right, you heard it here first. Now, some would say that Santa is going about things backwards and that giving gifts to those who have been on the Nice List for a shorter amount of time isn't fair. What they don't understand is that Santa is actually checking to see who should be off the Nice List and those closer to the end are just more likely to fall off the wagon... it's just human nature.
</p>

<p>
Anyway, to help him read the Nice List backwards, Santa has to pull in a Perl module called <tt><a href="http://search.cpan.org/search?module=File::ReadBackwards">File::ReadBackwards</a></tt>. This module doesn't have to load the entire file into memory in order to read it backwards. It is fast and memory efficient. After all, the nice list is a big list and it has to be checked twice on Christmas night. Santa needs something that can really get the job done.
We'll begin with the <a href="nice.txt">Nice List</a> sorted by seniority; <i>possibly by PerlMonks or use.perl id?</i>
</p>

<pre>
<span class="c">Addy
Ella
Ginger
Heather
Josh
Kevin
Larry
Merlyn
Nora
Oscar
Penelope
Rusty
Sam
Tom
Uri</span></pre>

<p>&hellip;which suspiciously happens to be in alphabetical order;
<i>test data or sociology breakthrough?!</i>.
Santa then could check his list twice ... backwards and forwards.</p>

<pre style="float:left; margin-right: 1em;"><span class="c">#First pass</span>
$ wc -l nice.txt
<span class="c">15 nice.txt</span>
$ mod5.pl | head -5
<span class="c">Uri
Tom
Sam
Rusty
Penelope</span>
$ mod5.pl | tail -5
<span class="c">Josh
Heather
Ginger
Ella
Addy</span>
$ mod5.pl | check_gui -i --news=net -o oops.txt
<span class="c">Searching for news on 'Uri'
News found.
Marked.
Searching for news on 'Tom'
Searching for news on 'Sam'
Stopped by user
&lt;broken pipe&gt;
You checked 3 records and marked 1.
Writing 1 record to "oops.txt"</span>
$ cat nice.txt oops.txt | sort | uniq -u > nice2.txt</pre>

<pre style="float:left"><span class="c">#Second pass</span>
$ wc -l nice.txt
<span class="c">14 nice2.txt</span>
$ head -5 nice2.txt 
<span class="c">Addy
Ella
Ginger
Heather
Josh</span>
$ tail -5 nice2.txt
<span class="c">Oscar
Penelope
Rusty
Sam
Tom</span>
$ packing_gui --nice nice2.txt --wants wants.db
<span class="c">LOAD FINISHED
Space for  1.7E6 Presents remaining
           0.0E0 Nice children not on manifest
Writing Manifest...
Writing Flight Plan...
Transmitting Manifest to SleighComp2000.......
 checksum ok
Transmitting Flight Plan to SleighComp2000.......
 checksum ok
Done</span>
</pre>

<p style="clear:both">Obviously this is just a test run,
I hope Santa uses the production data when they load the sleigh for real.</p>

<p>
Below you'll see how Santa works this little bit of magic. <tt>File::ReadBackwards</tt> can be used as a tied filehandle or an object. Since all the polar craftselves deal with material objects the rest of the year, Santa prefers the OO version.
</p>

<h1><a href="mod5.pl">mod5.pl</a></h1>
<hr />

<pre>
   1 <span class="k">use</span> <span class="w">File::ReadBackwards</span><span class="sc">;</span>
   2 
   3 <span class="i">$bw</span> = <span class="w">File::ReadBackwards</span><span class="w">-&gt;new</span><span class="s">(</span><span class="q">&#39;nice.txt&#39;</span><span class="s">)</span>
   4   <span class="k">or</span> <span class="k">die</span> <span class="q">&quot;can&#39;t read nice file $!&quot;</span><span class="sc">;</span>
   5 
   6 <span class="k">while</span> <span class="s">(</span> <span class="k">defined</span><span class="s">(</span> <span class="i">$log_line</span> = <span class="i">$bw</span><span class="i">-&gt;readline</span> <span class="s">)</span> <span class="s">)</span> <span class="s">{</span>
   7     <span class="k">print</span> <span class="i">$log_line</span><span class="sc">;</span>
   8 <span class="s">}</span>
</pre>

<blockquote style="padding: 1em; border: 2px ridge black; background-color:#eee">
Josh volunteered his own name for the tail end of a  very short Nice List.
I decided the module author, our own Uri of Boston.pm, deserved some attention
too. &mdash <i>Bill</i>
</blockquote>

</body>
</html>
